"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeDurationInput = TimeDurationInput;
exports.convertValueFromScale = convertValueFromScale;
exports.convertValueToScale = convertValueToScale;
exports.convertValueToDuration = convertValueToDuration;
exports.convertDurationToValue = convertDurationToValue;
exports["default"] = exports.convertToValue = exports.convertFromValue = exports.SCALE_CONVERSIONS = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function TimeDurationInput(_ref) {
  var value = _ref.value,
      scale = _ref.scale,
      onChange = _ref.onChange,
      className = _ref.className;

  var _useState = (0, _react.useState)(convertFromValue(value, scale)),
      _useState2 = _slicedToArray(_useState, 2),
      duration = _useState2[0],
      setDuration = _useState2[1];

  (0, _react.useEffect)(function () {
    var newDuration = convertFromValue(value, scale);
    if (newDuration !== duration) setDuration(newDuration);
  }, [value, scale]);
  var onInputChange = (0, _react.useCallback)(function (_ref2) {
    var target = _ref2.target;
    setDuration(target.value);
    var newValue = convertToValue(target.value, scale);
    if (!isNaN(newValue)) onChange(newValue);
  }, [onChange, scale]);
  return _react["default"].createElement("input", {
    type: "text",
    className: className,
    value: duration,
    onChange: onInputChange,
    "data-testid": "duration-input"
  });
}

TimeDurationInput.propTypes = {
  value: _propTypes["default"].number,
  scale: _propTypes["default"].oneOf(['d', 'h', 'm', 's', 'ms']),
  onChange: _propTypes["default"].func,
  className: _propTypes["default"].string
};
TimeDurationInput.defaultProps = {
  scale: 'ms',
  onChange: function onChange() {}
};
var SCALE_CONVERSIONS = {
  ms: 1,
  s: 1000,
  m: 60000,
  h: 3600000,
  d: 86400000
};
exports.SCALE_CONVERSIONS = SCALE_CONVERSIONS;

function convertValueFromScale(value, scale) {
  return value * (SCALE_CONVERSIONS[scale] || 1);
}

function convertValueToScale(value, scale) {
  return value / (SCALE_CONVERSIONS[scale] || 1);
}

function convertValueToDuration(value) {
  var milliseconds = Math.round(value % 1000);
  var seconds = Math.floor(value / 1000 % 60);
  var minutes = Math.floor(value / 60000 % 60);
  var hours = Math.floor(value / 3600000 % 24);
  var days = Math.floor(value / 86400000);
  return [days && "".concat(days, "d"), hours && "".concat(hours, "h"), minutes && "".concat(minutes, "m"), seconds && "".concat(seconds, "s"), (milliseconds || !value) && "".concat(milliseconds, "ms")].filter(function (x) {
    return !!x;
  }).join(' ');
}

function convertDurationToValue(duration) {
  var matches = duration.trim().match(/^(\d+d)?\s*(\d+h)?\s*(\d+m)?\s*(\d+s)?\s*(\d+ms)?$/i);
  if (!matches) return parseFloat(duration);

  var _matches$slice$map = matches.slice(1).map(function (x) {
    return parseInt(x) || 0;
  }),
      _matches$slice$map2 = _slicedToArray(_matches$slice$map, 5),
      days = _matches$slice$map2[0],
      hours = _matches$slice$map2[1],
      minutes = _matches$slice$map2[2],
      seconds = _matches$slice$map2[3],
      milliseconds = _matches$slice$map2[4];

  return (((days * 24 + hours) * 60 + minutes) * 60 + seconds) * 1000 + milliseconds;
}

var convertFromValue = function convertFromValue(value, scale) {
  return convertValueToDuration(convertValueFromScale(value, scale));
};

exports.convertFromValue = convertFromValue;

var convertToValue = function convertToValue(duration, scale) {
  return convertValueToScale(convertDurationToValue(duration), scale);
};

exports.convertToValue = convertToValue;
var _default = TimeDurationInput;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,